import { headers } from 'next/headers';
import Stripe from 'stripe';
import { supabaseAdmin } from '@/lib/supabaseAdmin';

// Initialisation de l'instance Stripe avec la cl√© secr√®te
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string);
// Chargement de la cl√© secr√®te du webhook Stripe depuis les variables d'environnement
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;

export async function POST(req: Request) {
  // Log d√©taill√© pour diagnostiquer les probl√®mes en production
  console.log('üöÄ Webhook Stripe appel√© - Environnement:', process.env.NODE_ENV);
  console.log('üîë Variables d\'environnement pr√©sentes:', {
    hasStripeSecretKey: !!process.env.STRIPE_SECRET_KEY,
    hasWebhookSecret: !!process.env.STRIPE_WEBHOOK_SECRET,
    hasSupabaseUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
    hasSupabaseServiceKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
    stripeKeyPrefix: process.env.STRIPE_SECRET_KEY?.substring(0, 10) + '...',
    webhookSecretPrefix: process.env.STRIPE_WEBHOOK_SECRET?.substring(0, 10) + '...',
  });

  // Extraction du body RAW avec arrayBuffer()
  const buffer = await req.arrayBuffer();
  const body = Buffer.from(buffer).toString('utf8');
  
  // R√©cup√©ration de la signature Stripe depuis les en-t√™tes de la requ√™te
  const signature = (await headers()).get('stripe-signature');

  // V√©rification si la signature est pr√©sente dans les en-t√™tes
  if (!signature) {
    console.error('La signature du webhook est manquante.');
    return new Response(JSON.stringify({ error: 'Webhook signature missing' }), { status: 400 });
  }

  let event;

  try {
    // Construction de l'√©v√©nement Stripe √† partir du corps, de la signature et de la cl√© secr√®te
    event = stripe.webhooks.constructEvent(body, signature, webhookSecret ?? "");
  } catch (error: any) {
    // Gestion des erreurs li√©es √† la v√©rification de la signature
    console.error(`√âchec de la v√©rification de la signature du webhook. ${error.message}`);
    return new Response(JSON.stringify({ error: error.message }), { status: 400 });
  }

  // Extraction des donn√©es et du type d'√©v√©nement
  const { data, type: eventType } = event;

  try {
    // Gestion des diff√©rents types d'√©v√©nements Stripe
    switch (eventType) {
      // Traitement de l'√©v√©nement de session de paiement compl√©t√©
      case 'checkout.session.completed': {
        console.log('Handling checkout.session.completed event...');
        const session = data.object as Stripe.Checkout.Session;
      
        if (!session.customer) {
          throw new Error('Customer ID manquant dans la session');
        }
      
        const customerId = session.customer as string;
        console.log("Customer ID:", customerId);
        
        // R√©cup√©ration des informations du client depuis Stripe
        const customer = await stripe.customers.retrieve(customerId);
      
        if ('deleted' in customer) {
          throw new Error('Le client est supprim√©');
        }
      
        if (!customer.email) {
          throw new Error('Aucun email client fourni');
        }
      
        console.log(`Customer retrieved: ${JSON.stringify(customer)}`);
      
        // Recherche de l'utilisateur auth par email
        const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.listUsers();
        
        if (authError) {
          throw new Error(`Erreur lors de la recherche des utilisateurs auth: ${authError.message}`);
        }
        
        const foundAuthUser = authUser.users.find(user => user.email === customer.email);
        
        if (!foundAuthUser) {
          throw new Error(`Utilisateur auth non trouv√© pour l'email: ${customer.email}`);
        }
        
        // R√©cup√©ration des d√©tails de l'abonnement pour d√©terminer le plan
        let subscriptionPlan = 'premium'; // Par d√©faut
        if (session.subscription) {
          try {
            const subscription = await stripe.subscriptions.retrieve(session.subscription as string);
            const priceId = subscription.items.data[0]?.price.id;
            
            // Mappage des prix Stripe vers les noms de plans
            const priceToPlansMap: { [key: string]: string } = {
              'price_1RZDUKDVNTY8xoRACeuUsEi0': 'premium', // Premium mensuel
              'price_1RZDXADVNTY8xoRAfnqRzDRc': 'premium', // Premium annuel
              'price_1RZE6HDVNTY8xoRAhOgC2Jh6': 'infinite', // Infinite mensuel
              'price_1RZE6dDVNTY8xoRAIRTyLsy3': 'infinite', // Infinite annuel
            };
            
            subscriptionPlan = priceToPlansMap[priceId] || 'premium';
            console.log(`Plan d√©termin√©: ${subscriptionPlan} pour le prix: ${priceId}`);
          } catch (error) {
            console.error('Erreur lors de la r√©cup√©ration de l\'abonnement:', error);
            console.log('Utilisation du plan par d√©faut: premium');
          }
        }
        
        // Recherche du profil utilisateur
        const { data: existingProfile, error: findError } = await supabaseAdmin
          .from('user_profiles')
          .select('*')
          .eq('user_id', foundAuthUser.id)
          .single();
        
        if (findError && findError.code !== 'PGRST116') {
          throw new Error(`Erreur lors de la recherche du profil utilisateur: ${findError.message}`);
        }
      
        // Si le profil n'existe pas encore, cr√©ation d'un nouveau profil
        if (!existingProfile) {
          const { data: newProfile, error: createError } = await supabaseAdmin
            .from('user_profiles')
            .insert([{
              user_id: foundAuthUser.id,
              stripe_customer_id: customerId,
              subscription: subscriptionPlan, // Enregistrement du nom du plan
            }])
            .select()
            .single();
          
          if (createError) {
            throw new Error(`Erreur lors de la cr√©ation du profil utilisateur: ${createError.message}`);
          }
          
          console.log(`Nouveau profil utilisateur cr√©√© avec le plan ${subscriptionPlan}: ${JSON.stringify(newProfile)}`);
        } else {
          // Mise √† jour des informations du profil utilisateur existant
          const { data: updatedProfile, error: updateError } = await supabaseAdmin
            .from('user_profiles')
            .update({
              stripe_customer_id: customerId,
              subscription: subscriptionPlan, // Mise √† jour avec le nom du plan
            })
            .eq('user_id', foundAuthUser.id)
            .select()
            .single();
          
          if (updateError) {
            throw new Error(`Erreur lors de la mise √† jour du profil utilisateur: ${updateError.message}`);
          }
          
          console.log(`Profil utilisateur mis √† jour avec le plan ${subscriptionPlan}: ${JSON.stringify(updatedProfile)}`);
        }
        break;
      }

      // Traitement de l'√©v√©nement de suppression d'abonnement
      case 'customer.subscription.deleted': {
        console.log('Handling customer.subscription.deleted event...');
        const subscription = data.object as Stripe.Subscription;

        if (!subscription.customer) {
          throw new Error("Informations d'abonnement manquantes");
        }

        const customerId = subscription.customer as string;

        // Recherche du profil utilisateur associ√© au client dans la base de donn√©es
        const { data: userProfile, error: findError } = await supabaseAdmin
          .from('user_profiles')
          .select('*')
          .eq('stripe_customer_id', customerId)
          .single();

        if (findError || !userProfile) {
          console.warn(`Profil utilisateur non trouv√© pour le client avec ID: ${customerId}. Ceci peut √™tre normal si l'utilisateur n'avait pas encore d'abonnement actif.`);
          // Ne pas lancer d'erreur - retourner succ√®s silencieusement
          return new Response(JSON.stringify({ message: 'Aucun profil utilisateur trouv√© - aucune action n√©cessaire' }), { status: 200 });
        }

        // Mise √† jour des informations du profil utilisateur pour refl√©ter la suppression de l'abonnement
        const { data: updatedProfile, error: updateError } = await supabaseAdmin
          .from('user_profiles')
          .update({
            subscription: 'free' // Retour au plan gratuit
          })
          .eq('user_id', userProfile.user_id)
          .select()
          .single();

        if (updateError) {
          throw new Error(`Erreur lors de la mise √† jour du profil utilisateur: ${updateError.message}`);
        }

        console.log(`Abonnement supprim√© pour l'utilisateur, retour au plan free: ${JSON.stringify(updatedProfile)}`);

        break;
      }
      // Gestion des √©v√©nements non pris en charge
      default:
        console.log(`Type d'√©v√©nement non g√©r√©: ${eventType}`);
    }



    
  } catch (e) {
    // Gestion des erreurs g√©n√©rales
    if (e instanceof Error) {
      console.error(`Erreur Stripe: ${e.message} | Type d'√©v√©nement: ${eventType}`);
      return new Response(JSON.stringify({ error: e.message }), { status: 400 });
    } else {
      console.error(`Erreur inconnue: ${e}`);
      return new Response(JSON.stringify({ error: 'Erreur inconnue' }), { status: 400 });
    }
  }

  // R√©ponse r√©ussie pour le webhook
  return new Response(JSON.stringify({ received: true }));
}